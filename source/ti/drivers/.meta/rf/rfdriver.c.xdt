%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== rfdriver.c.xdt ========
 */

    /* RF module passed in args[] */
    let RF = args[0];

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let callbackFxn = RF.$static.globalCallbackFunction;
    if ((callbackFxn.length == 0) ||
            (RF.$static.globalCallbackFunction.toLowerCase() == "null")) {
        callbackFxn = "NULL";
    }

    /* generate a list of all extern references */
    let hwiPriority = Common.intPriority2Hex(RF.$static.interruptPriority);
    let swiPriority = Common.swiPriority2Int(RF.$static.softwareInterruptPriority);

    let eventMask;

    if (RF.$static.globalEventMask.length == 0) {
        eventMask = 0;
    }
    else {
        eventMask = RF.$static.globalEventMask.join(" | ");
    }

    /* Pin information */
    const pins = RF.getRfPins();

    /* Determine when to generate RF Driver callback */
    const generateRfCallback = RF.$static.$hardware != null;
%%}
%
% if (pins.length > 0) {
/*
 *  =============================== RF Front-end ===============================
 */

/*
 * ======== Front-end control ========
 */
static PIN_Handle frontendPins;
static PIN_State frontendState;

void initRfFrontend(void)
{
    static bool initialized = false;

    if (!initialized) {
        PIN_Config frontendConfig[] = {
%       for (let i = 0; i < pins.length; i++) {
%           const name = pins[i].name;
            `name` | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,      /* Path disabled */
%       }
            PIN_TERMINATE
        };
        frontendPins = PIN_open(&frontendState, frontendConfig);
        initialized = true;
    }
}
%}
%

/*
 *  =============================== RF Driver ===============================
 */

#include <ti/drivers/rf/RF.h>
% if (callbackFxn != "NULL") {
/*
 *  Board-specific callback function to set the correct antenna path.
% if (!generateRfCallback) {
 *  
 *  NB! `RF.userMessage`
% }
 *
 */
%   if (generateRfCallback) {
static void `callbackFxn`(RF_Handle client, RF_GlobalEvent event, void* arg);
%}
%else 
%{
extern void `callbackFxn`(RF_Handle client, RF_GlobalEvent event, void* arg);
%}
% }

const RFCC26XX_HWAttrsV2 RFCC26XX_hwAttrs = {
    .hwiPriority        = `hwiPriority`,
    .swiPriority        = (uint8_t)`swiPriority`,
    .xoscHfAlwaysNeeded = `RF.$static.xoscNeeded`,
    .globalCallback     = `callbackFxn`,
    .globalEventMask    = `eventMask`
};

% if (callbackFxn != "NULL") {
%   if (generateRfCallback) {
%   
/*
 * ======== `callbackFxn` ========
 * Sets up the antenna switch depending on the current PHY configuration.
 * Truth table:
 *
 * Path        DIO28 DIO29 DIO30
 * =========== ===== ===== =====
 * Off         0     0     0
 * Sub-1 GHz   0     0     1
 * 2.4 GHz     1     0     0
 * 20 dBm TX   0     1     0
 */
static void `callbackFxn`(RF_Handle client, RF_GlobalEvent events, void *arg)
{
    /* Local variable. */
    bool    sub1GHz   = false;
    uint8_t loDivider = 0;

    /* Initialize front-end (will only be done once) */
    initRfFrontend();

    /* Switch off all paths first. Needs to be done anyway in every sub-case below. */
%       for (let i = 0; i < pins.length; i++) {
%         const name = pins[i].name;
    PINCC26XX_setOutputValue(`name`, 0);
%       }

    if (events & RF_GlobalEventRadioSetup) {
        /* Decode the current PA configuration. */
        RF_TxPowerTable_PAType paType = (RF_TxPowerTable_PAType)RF_getTxPower(client).paType;

        /* Decode the generic argument as a setup command. */
        RF_RadioSetup* setupCommand = (RF_RadioSetup*)arg;

        switch (setupCommand->common.commandNo) {
            case (CMD_RADIO_SETUP):
            case (CMD_BLE5_RADIO_SETUP):
                    loDivider = RF_LODIVIDER_MASK & setupCommand->common.loDivider;

                    /* Sub-1GHz front-end. */
                    if (loDivider != 0) {
                        sub1GHz = true;
                    }
                    break;
            case (CMD_PROP_RADIO_DIV_SETUP):
                    loDivider = RF_LODIVIDER_MASK & setupCommand->prop_div.loDivider;

                    /* Sub-1GHz front-end. */
                    if (loDivider != 0) {
                        sub1GHz = true;
                    }
                    break;
            default:break;
        }

        if (sub1GHz) {
            /* Sub-1 GHz */
            if (paType == RF_TxPowerTable_HighPA) {
                /* PA enable --> HIGH PA
                 * LNA enable --> Sub-1 GHz
                 */
                PINCC26XX_setMux(frontendPins, CONFIG_RF_24GHZ, PINCC26XX_MUX_GPIO);
                /* Note: RFC_GPO3 is a work-around because the RFC_GPO1 (PA enable signal) is sometimes not
                         de-asserted on CC1352 Rev A. */
                PINCC26XX_setMux(frontendPins, CONFIG_RF_HIGH_PA, PINCC26XX_MUX_RFC_GPO3);
                PINCC26XX_setMux(frontendPins, CONFIG_RF_SUB1GHZ, PINCC26XX_MUX_RFC_GPO0);
            } else {
                /* RF core active --> Sub-1 GHz */
%       for (let i = 0; i < pins.length; i++) {
%         const name = pins[i].name;
                PINCC26XX_setMux(frontendPins, `name`, PINCC26XX_MUX_GPIO);
%       }
                PINCC26XX_setOutputValue(CONFIG_RF_SUB1GHZ, 1);
            }
        } else {
            /* 2.4 GHz */
            if (paType == RF_TxPowerTable_HighPA)
            {
                /* PA enable --> HIGH PA
                 * LNA enable --> 2.4 GHz
                 */
                PINCC26XX_setMux(frontendPins, CONFIG_RF_24GHZ, PINCC26XX_MUX_RFC_GPO0);
                /* Note: RFC_GPO3 is a work-around because the RFC_GPO1 (PA enable signal) is sometimes not
                         de-asserted on CC1352 Rev A. */
                PINCC26XX_setMux(frontendPins, CONFIG_RF_HIGH_PA, PINCC26XX_MUX_RFC_GPO3);
                PINCC26XX_setMux(frontendPins, CONFIG_RF_SUB1GHZ, PINCC26XX_MUX_GPIO);
            } else {
                /* RF core active --> 2.4 GHz */
%       for (let i = 0; i < pins.length; i++) {
%         const name = pins[i].name;
                PINCC26XX_setMux(frontendPins, `name`, PINCC26XX_MUX_GPIO);
%       }
                PINCC26XX_setOutputValue(CONFIG_RF_24GHZ, 1);
            }
        }
    } else {
        /* Reset the IO multiplexer to GPIO functionality */
%       for (let i = 0; i < pins.length; i++) {
%         const name = pins[i].name;
        PINCC26XX_setMux(frontendPins, `name`, PINCC26XX_MUX_GPIO);
%       }
    }
}
% }
%}
